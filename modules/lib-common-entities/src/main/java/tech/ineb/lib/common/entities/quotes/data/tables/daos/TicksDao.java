/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import tech.ineb.lib.common.entities.quotes.data.tables.Ticks;
import tech.ineb.lib.common.entities.quotes.data.tables.records.TicksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicksDao extends DAOImpl<TicksRecord, tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks, UUID> {

    /**
     * Create a new TicksDao without any configuration
     */
    public TicksDao() {
        super(Ticks.TICKS, tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks.class);
    }

    /**
     * Create a new TicksDao with an attached configuration
     */
    public TicksDao(Configuration configuration) {
        super(Ticks.TICKS, tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks.class, configuration);
    }

    @Override
    public UUID getId(tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Ticks.TICKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchById(UUID... values) {
        return fetch(Ticks.TICKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks fetchOneById(UUID value) {
        return fetchOne(Ticks.TICKS.ID, value);
    }

    /**
     * Fetch records that have <code>ask BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfAsk(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Ticks.TICKS.ASK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ask IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchByAsk(BigDecimal... values) {
        return fetch(Ticks.TICKS.ASK, values);
    }

    /**
     * Fetch records that have <code>bid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfBid(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Ticks.TICKS.BID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bid IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchByBid(BigDecimal... values) {
        return fetch(Ticks.TICKS.BID, values);
    }

    /**
     * Fetch records that have <code>volume BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfVolume(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Ticks.TICKS.VOLUME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>volume IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchByVolume(Long... values) {
        return fetch(Ticks.TICKS.VOLUME, values);
    }

    /**
     * Fetch records that have <code>time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Ticks.TICKS.TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchByTime(LocalDateTime... values) {
        return fetch(Ticks.TICKS.TIME, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Ticks.TICKS.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchByVersion(Integer... values) {
        return fetch(Ticks.TICKS.VERSION, values);
    }

    /**
     * Fetch records that have <code>equity_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchRangeOfEquityId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Ticks.TICKS.EQUITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>equity_id IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Ticks> fetchByEquityId(UUID... values) {
        return fetch(Ticks.TICKS.EQUITY_ID, values);
    }
}
