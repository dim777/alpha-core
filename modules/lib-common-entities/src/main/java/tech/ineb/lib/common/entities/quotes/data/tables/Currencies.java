/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.ineb.lib.common.entities.quotes.data.History;
import tech.ineb.lib.common.entities.quotes.data.Keys;
import tech.ineb.lib.common.entities.quotes.data.tables.records.CurrenciesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currencies extends TableImpl<CurrenciesRecord> {

    private static final long serialVersionUID = 1851289532;

    /**
     * The reference instance of <code>history.currencies</code>
     */
    public static final Currencies CURRENCIES = new Currencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrenciesRecord> getRecordType() {
        return CurrenciesRecord.class;
    }

    /**
     * The column <code>history.currencies.id</code>.
     */
    public final TableField<CurrenciesRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.currencies.code</code>. alphabetic code
     */
    public final TableField<CurrenciesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "alphabetic code");

    /**
     * The column <code>history.currencies.name</code>.
     */
    public final TableField<CurrenciesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>history.currencies.numeric_code</code>.
     */
    public final TableField<CurrenciesRecord, Long> NUMERIC_CODE = createField(DSL.name("numeric_code"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>history.currencies.version</code>.
     */
    public final TableField<CurrenciesRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>history.currencies</code> table reference
     */
    public Currencies() {
        this(DSL.name("currencies"), null);
    }

    /**
     * Create an aliased <code>history.currencies</code> table reference
     */
    public Currencies(String alias) {
        this(DSL.name(alias), CURRENCIES);
    }

    /**
     * Create an aliased <code>history.currencies</code> table reference
     */
    public Currencies(Name alias) {
        this(alias, CURRENCIES);
    }

    private Currencies(Name alias, Table<CurrenciesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currencies(Name alias, Table<CurrenciesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Currencies(Table<O> child, ForeignKey<O, CurrenciesRecord> key) {
        super(child, key, CURRENCIES);
    }

    @Override
    public Schema getSchema() {
        return History.HISTORY;
    }

    @Override
    public UniqueKey<CurrenciesRecord> getPrimaryKey() {
        return Keys.CURRENCIES_PKEY;
    }

    @Override
    public List<UniqueKey<CurrenciesRecord>> getKeys() {
        return Arrays.<UniqueKey<CurrenciesRecord>>asList(Keys.CURRENCIES_PKEY);
    }

    @Override
    public TableField<CurrenciesRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Currencies as(String alias) {
        return new Currencies(DSL.name(alias), this);
    }

    @Override
    public Currencies as(Name alias) {
        return new Currencies(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(String name) {
        return new Currencies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(Name name) {
        return new Currencies(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, Long, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
