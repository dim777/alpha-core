/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.ineb.lib.common.entities.quotes.data.History;
import tech.ineb.lib.common.entities.quotes.data.Keys;
import tech.ineb.lib.common.entities.quotes.data.tables.records.TicksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticks extends TableImpl<TicksRecord> {

    private static final long serialVersionUID = -291677142;

    /**
     * The reference instance of <code>history.ticks</code>
     */
    public static final Ticks TICKS = new Ticks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicksRecord> getRecordType() {
        return TicksRecord.class;
    }

    /**
     * The column <code>history.ticks.id</code>.
     */
    public final TableField<TicksRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.ticks.ask</code>.
     */
    public final TableField<TicksRecord, BigDecimal> ASK = createField(DSL.name("ask"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.ticks.bid</code>.
     */
    public final TableField<TicksRecord, BigDecimal> BID = createField(DSL.name("bid"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.ticks.volume</code>.
     */
    public final TableField<TicksRecord, Long> VOLUME = createField(DSL.name("volume"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>history.ticks.time</code>.
     */
    public final TableField<TicksRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>history.ticks.version</code>.
     */
    public final TableField<TicksRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>history.ticks.equity_id</code>.
     */
    public final TableField<TicksRecord, UUID> EQUITY_ID = createField(DSL.name("equity_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>history.ticks</code> table reference
     */
    public Ticks() {
        this(DSL.name("ticks"), null);
    }

    /**
     * Create an aliased <code>history.ticks</code> table reference
     */
    public Ticks(String alias) {
        this(DSL.name(alias), TICKS);
    }

    /**
     * Create an aliased <code>history.ticks</code> table reference
     */
    public Ticks(Name alias) {
        this(alias, TICKS);
    }

    private Ticks(Name alias, Table<TicksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticks(Name alias, Table<TicksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ticks(Table<O> child, ForeignKey<O, TicksRecord> key) {
        super(child, key, TICKS);
    }

    @Override
    public Schema getSchema() {
        return History.HISTORY;
    }

    @Override
    public UniqueKey<TicksRecord> getPrimaryKey() {
        return Keys.TICKS_PKEY;
    }

    @Override
    public List<UniqueKey<TicksRecord>> getKeys() {
        return Arrays.<UniqueKey<TicksRecord>>asList(Keys.TICKS_PKEY);
    }

    @Override
    public List<ForeignKey<TicksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TicksRecord, ?>>asList(Keys.TICKS__FKTICKS788156);
    }

    public Equities equities() {
        return new Equities(this, Keys.TICKS__FKTICKS788156);
    }

    @Override
    public TableField<TicksRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Ticks as(String alias) {
        return new Ticks(DSL.name(alias), this);
    }

    @Override
    public Ticks as(Name alias) {
        return new Ticks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticks rename(String name) {
        return new Ticks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticks rename(Name name) {
        return new Ticks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, BigDecimal, BigDecimal, Long, LocalDateTime, Integer, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
