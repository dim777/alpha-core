/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables.daos;


import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import tech.ineb.lib.common.entities.quotes.data.tables.Currencies;
import tech.ineb.lib.common.entities.quotes.data.tables.records.CurrenciesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrenciesDao extends DAOImpl<CurrenciesRecord, tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies, UUID> {

    /**
     * Create a new CurrenciesDao without any configuration
     */
    public CurrenciesDao() {
        super(Currencies.CURRENCIES, tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies.class);
    }

    /**
     * Create a new CurrenciesDao with an attached configuration
     */
    public CurrenciesDao(Configuration configuration) {
        super(Currencies.CURRENCIES, tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies.class, configuration);
    }

    @Override
    public UUID getId(tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Currencies.CURRENCIES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchById(UUID... values) {
        return fetch(Currencies.CURRENCIES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies fetchOneById(UUID value) {
        return fetchOne(Currencies.CURRENCIES.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Currencies.CURRENCIES.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchByCode(String... values) {
        return fetch(Currencies.CURRENCIES.CODE, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Currencies.CURRENCIES.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchByName(String... values) {
        return fetch(Currencies.CURRENCIES.NAME, values);
    }

    /**
     * Fetch records that have <code>numeric_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchRangeOfNumericCode(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Currencies.CURRENCIES.NUMERIC_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>numeric_code IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchByNumericCode(Long... values) {
        return fetch(Currencies.CURRENCIES.NUMERIC_CODE, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Currencies.CURRENCIES.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<tech.ineb.lib.common.entities.quotes.data.tables.pojos.Currencies> fetchByVersion(Integer... values) {
        return fetch(Currencies.CURRENCIES.VERSION, values);
    }
}
