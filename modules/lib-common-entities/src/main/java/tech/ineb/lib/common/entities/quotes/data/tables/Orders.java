/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import tech.ineb.lib.common.entities.quotes.data.History;
import tech.ineb.lib.common.entities.quotes.data.Keys;
import tech.ineb.lib.common.entities.quotes.data.tables.records.OrdersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 375742421;

    /**
     * The reference instance of <code>history.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>history.orders.id</code>.
     */
    public final TableField<OrdersRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.orders.volume</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> VOLUME = createField(DSL.name("volume"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.orders.price</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.orders.amount</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.orders.order_type</code>.
     */
    public final TableField<OrdersRecord, Integer> ORDER_TYPE = createField(DSL.name("order_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>history.orders.order_status</code>.
     */
    public final TableField<OrdersRecord, Integer> ORDER_STATUS = createField(DSL.name("order_status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>history.orders.created</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>history.orders.version</code>.
     */
    public final TableField<OrdersRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>history.orders.equity_id</code>.
     */
    public final TableField<OrdersRecord, UUID> EQUITY_ID = createField(DSL.name("equity_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>history.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    /**
     * Create an aliased <code>history.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>history.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return History.HISTORY;
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.ORDERS_PKEY;
    }

    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.ORDERS_PKEY);
    }

    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.ORDERS__FKORDERS661644);
    }

    public Equities equities() {
        return new Equities(this, Keys.ORDERS__FKORDERS661644);
    }

    @Override
    public List<Check<OrdersRecord>> getChecks() {
        return Arrays.<Check<OrdersRecord>>asList(
              Internal.createCheck(this, DSL.name("ck_order_status"), "((order_status = ANY (ARRAY[0, 1])))", true)
            , Internal.createCheck(this, DSL.name("ck_order_type"), "((order_type = ANY (ARRAY[0, 1, 2, 3, 4, 5, 6, 7, 8])))", true)
        );
    }

    @Override
    public TableField<OrdersRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, BigDecimal, BigDecimal, BigDecimal, Integer, Integer, LocalDateTime, Integer, UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
