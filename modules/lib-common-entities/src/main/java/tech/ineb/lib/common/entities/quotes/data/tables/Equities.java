/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tech.ineb.lib.common.entities.quotes.data.History;
import tech.ineb.lib.common.entities.quotes.data.Keys;
import tech.ineb.lib.common.entities.quotes.data.tables.records.EquitiesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Equities extends TableImpl<EquitiesRecord> {

    private static final long serialVersionUID = -926161288;

    /**
     * The reference instance of <code>history.equities</code>
     */
    public static final Equities EQUITIES = new Equities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EquitiesRecord> getRecordType() {
        return EquitiesRecord.class;
    }

    /**
     * The column <code>history.equities.id</code>.
     */
    public final TableField<EquitiesRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.equities.code</code>.
     */
    public final TableField<EquitiesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>history.equities.name</code>.
     */
    public final TableField<EquitiesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>history.equities.commission</code>.
     */
    public final TableField<EquitiesRecord, BigDecimal> COMMISSION = createField(DSL.name("commission"), org.jooq.impl.SQLDataType.NUMERIC(19, 4), this, "");

    /**
     * The column <code>history.equities.step</code>.
     */
    public final TableField<EquitiesRecord, BigDecimal> STEP = createField(DSL.name("step"), org.jooq.impl.SQLDataType.NUMERIC(19, 4), this, "");

    /**
     * The column <code>history.equities.active</code>.
     */
    public final TableField<EquitiesRecord, BigDecimal> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.NUMERIC(19, 4), this, "");

    /**
     * The column <code>history.equities.version</code>.
     */
    public final TableField<EquitiesRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>history.equities.currency_id</code>.
     */
    public final TableField<EquitiesRecord, UUID> CURRENCY_ID = createField(DSL.name("currency_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.equities.country_id</code>.
     */
    public final TableField<EquitiesRecord, UUID> COUNTRY_ID = createField(DSL.name("country_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.equities.stock_id</code>.
     */
    public final TableField<EquitiesRecord, UUID> STOCK_ID = createField(DSL.name("stock_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>history.equities</code> table reference
     */
    public Equities() {
        this(DSL.name("equities"), null);
    }

    /**
     * Create an aliased <code>history.equities</code> table reference
     */
    public Equities(String alias) {
        this(DSL.name(alias), EQUITIES);
    }

    /**
     * Create an aliased <code>history.equities</code> table reference
     */
    public Equities(Name alias) {
        this(alias, EQUITIES);
    }

    private Equities(Name alias, Table<EquitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Equities(Name alias, Table<EquitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Equities(Table<O> child, ForeignKey<O, EquitiesRecord> key) {
        super(child, key, EQUITIES);
    }

    @Override
    public Schema getSchema() {
        return History.HISTORY;
    }

    @Override
    public UniqueKey<EquitiesRecord> getPrimaryKey() {
        return Keys.EQUITIES_PKEY;
    }

    @Override
    public List<UniqueKey<EquitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<EquitiesRecord>>asList(Keys.EQUITIES_PKEY);
    }

    @Override
    public List<ForeignKey<EquitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EquitiesRecord, ?>>asList(Keys.EQUITIES__FKEQUITIES187020, Keys.EQUITIES__FKEQUITIES215282, Keys.EQUITIES__FKEQUITIES433591);
    }

    public Currencies currencies() {
        return new Currencies(this, Keys.EQUITIES__FKEQUITIES187020);
    }

    public Countries countries() {
        return new Countries(this, Keys.EQUITIES__FKEQUITIES215282);
    }

    public Stocks stocks() {
        return new Stocks(this, Keys.EQUITIES__FKEQUITIES433591);
    }

    @Override
    public TableField<EquitiesRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Equities as(String alias) {
        return new Equities(DSL.name(alias), this);
    }

    @Override
    public Equities as(Name alias) {
        return new Equities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Equities rename(String name) {
        return new Equities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Equities rename(Name name) {
        return new Equities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, String, String, BigDecimal, BigDecimal, BigDecimal, Integer, UUID, UUID, UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
