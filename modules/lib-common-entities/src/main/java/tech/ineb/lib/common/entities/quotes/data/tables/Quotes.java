/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import tech.ineb.lib.common.entities.quotes.data.History;
import tech.ineb.lib.common.entities.quotes.data.Keys;
import tech.ineb.lib.common.entities.quotes.data.tables.records.QuotesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quotes extends TableImpl<QuotesRecord> {

    private static final long serialVersionUID = -281330635;

    /**
     * The reference instance of <code>history.quotes</code>
     */
    public static final Quotes QUOTES = new Quotes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuotesRecord> getRecordType() {
        return QuotesRecord.class;
    }

    /**
     * The column <code>history.quotes.id</code>.
     */
    public final TableField<QuotesRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.quotes.open</code>.
     */
    public final TableField<QuotesRecord, BigDecimal> OPEN = createField(DSL.name("open"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.quotes.high</code>.
     */
    public final TableField<QuotesRecord, BigDecimal> HIGH = createField(DSL.name("high"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.quotes.low</code>.
     */
    public final TableField<QuotesRecord, BigDecimal> LOW = createField(DSL.name("low"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.quotes.close</code>.
     */
    public final TableField<QuotesRecord, BigDecimal> CLOSE = createField(DSL.name("close"), org.jooq.impl.SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>history.quotes.time</code>.
     */
    public final TableField<QuotesRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>history.quotes.time_frame</code>.
     */
    public final TableField<QuotesRecord, Integer> TIME_FRAME = createField(DSL.name("time_frame"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>history.quotes.equity_id</code>.
     */
    public final TableField<QuotesRecord, UUID> EQUITY_ID = createField(DSL.name("equity_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>history.quotes.version</code>.
     */
    public final TableField<QuotesRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>history.quotes.equitiesid</code>.
     */
    public final TableField<QuotesRecord, UUID> EQUITIESID = createField(DSL.name("equitiesid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>history.quotes</code> table reference
     */
    public Quotes() {
        this(DSL.name("quotes"), null);
    }

    /**
     * Create an aliased <code>history.quotes</code> table reference
     */
    public Quotes(String alias) {
        this(DSL.name(alias), QUOTES);
    }

    /**
     * Create an aliased <code>history.quotes</code> table reference
     */
    public Quotes(Name alias) {
        this(alias, QUOTES);
    }

    private Quotes(Name alias, Table<QuotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quotes(Name alias, Table<QuotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Quotes(Table<O> child, ForeignKey<O, QuotesRecord> key) {
        super(child, key, QUOTES);
    }

    @Override
    public Schema getSchema() {
        return History.HISTORY;
    }

    @Override
    public UniqueKey<QuotesRecord> getPrimaryKey() {
        return Keys.QUOTES_PKEY;
    }

    @Override
    public List<UniqueKey<QuotesRecord>> getKeys() {
        return Arrays.<UniqueKey<QuotesRecord>>asList(Keys.QUOTES_PKEY);
    }

    @Override
    public List<ForeignKey<QuotesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuotesRecord, ?>>asList(Keys.QUOTES__FKQUOTES231782);
    }

    public Equities equities() {
        return new Equities(this, Keys.QUOTES__FKQUOTES231782);
    }

    @Override
    public List<Check<QuotesRecord>> getChecks() {
        return Arrays.<Check<QuotesRecord>>asList(
              Internal.createCheck(this, DSL.name("ck_time_frame"), "((time_frame = ANY (ARRAY[0, 1, 2, 3, 4, 5, 6, 7])))", true)
        );
    }

    @Override
    public TableField<QuotesRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Quotes as(String alias) {
        return new Quotes(DSL.name(alias), this);
    }

    @Override
    public Quotes as(Name alias) {
        return new Quotes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quotes rename(String name) {
        return new Quotes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quotes rename(Name name) {
        return new Quotes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, BigDecimal, BigDecimal, BigDecimal, BigDecimal, LocalDateTime, Integer, UUID, Integer, UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
