/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import tech.ineb.lib.common.entities.quotes.data.tables.Stocks;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StocksRecord extends UpdatableRecordImpl<StocksRecord> implements Record4<UUID, String, String, Integer> {

    private static final long serialVersionUID = -39737064;

    /**
     * Setter for <code>history.stocks.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>history.stocks.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>history.stocks.code</code>.
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>history.stocks.code</code>.
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>history.stocks.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>history.stocks.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>history.stocks.version</code>.
     */
    public void setVersion(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>history.stocks.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Stocks.STOCKS.ID;
    }

    @Override
    public Field<String> field2() {
        return Stocks.STOCKS.CODE;
    }

    @Override
    public Field<String> field3() {
        return Stocks.STOCKS.NAME;
    }

    @Override
    public Field<Integer> field4() {
        return Stocks.STOCKS.VERSION;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Integer component4() {
        return getVersion();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Integer value4() {
        return getVersion();
    }

    @Override
    public StocksRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public StocksRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public StocksRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public StocksRecord value4(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public StocksRecord values(UUID value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StocksRecord
     */
    public StocksRecord() {
        super(Stocks.STOCKS);
    }

    /**
     * Create a detached, initialised StocksRecord
     */
    public StocksRecord(UUID id, String code, String name, Integer version) {
        super(Stocks.STOCKS);

        set(0, id);
        set(1, code);
        set(2, name);
        set(3, version);
    }
}
