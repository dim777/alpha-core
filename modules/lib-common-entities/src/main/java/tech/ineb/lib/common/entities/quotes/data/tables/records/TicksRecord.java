/*
 * This file is generated by jOOQ.
 */
package tech.ineb.lib.common.entities.quotes.data.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import tech.ineb.lib.common.entities.quotes.data.tables.Ticks;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicksRecord extends UpdatableRecordImpl<TicksRecord> implements Record7<UUID, BigDecimal, BigDecimal, Long, LocalDateTime, Integer, UUID> {

    private static final long serialVersionUID = 443384404;

    /**
     * Setter for <code>history.ticks.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>history.ticks.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>history.ticks.ask</code>.
     */
    public void setAsk(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>history.ticks.ask</code>.
     */
    public BigDecimal getAsk() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>history.ticks.bid</code>.
     */
    public void setBid(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>history.ticks.bid</code>.
     */
    public BigDecimal getBid() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>history.ticks.volume</code>.
     */
    public void setVolume(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>history.ticks.volume</code>.
     */
    public Long getVolume() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>history.ticks.time</code>.
     */
    public void setTime(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>history.ticks.time</code>.
     */
    public LocalDateTime getTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>history.ticks.version</code>.
     */
    public void setVersion(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>history.ticks.version</code>.
     */
    public Integer getVersion() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>history.ticks.equity_id</code>.
     */
    public void setEquityId(UUID value) {
        set(6, value);
    }

    /**
     * Getter for <code>history.ticks.equity_id</code>.
     */
    public UUID getEquityId() {
        return (UUID) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, BigDecimal, BigDecimal, Long, LocalDateTime, Integer, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, BigDecimal, BigDecimal, Long, LocalDateTime, Integer, UUID> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Ticks.TICKS.ID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return Ticks.TICKS.ASK;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Ticks.TICKS.BID;
    }

    @Override
    public Field<Long> field4() {
        return Ticks.TICKS.VOLUME;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Ticks.TICKS.TIME;
    }

    @Override
    public Field<Integer> field6() {
        return Ticks.TICKS.VERSION;
    }

    @Override
    public Field<UUID> field7() {
        return Ticks.TICKS.EQUITY_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public BigDecimal component2() {
        return getAsk();
    }

    @Override
    public BigDecimal component3() {
        return getBid();
    }

    @Override
    public Long component4() {
        return getVolume();
    }

    @Override
    public LocalDateTime component5() {
        return getTime();
    }

    @Override
    public Integer component6() {
        return getVersion();
    }

    @Override
    public UUID component7() {
        return getEquityId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public BigDecimal value2() {
        return getAsk();
    }

    @Override
    public BigDecimal value3() {
        return getBid();
    }

    @Override
    public Long value4() {
        return getVolume();
    }

    @Override
    public LocalDateTime value5() {
        return getTime();
    }

    @Override
    public Integer value6() {
        return getVersion();
    }

    @Override
    public UUID value7() {
        return getEquityId();
    }

    @Override
    public TicksRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TicksRecord value2(BigDecimal value) {
        setAsk(value);
        return this;
    }

    @Override
    public TicksRecord value3(BigDecimal value) {
        setBid(value);
        return this;
    }

    @Override
    public TicksRecord value4(Long value) {
        setVolume(value);
        return this;
    }

    @Override
    public TicksRecord value5(LocalDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public TicksRecord value6(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public TicksRecord value7(UUID value) {
        setEquityId(value);
        return this;
    }

    @Override
    public TicksRecord values(UUID value1, BigDecimal value2, BigDecimal value3, Long value4, LocalDateTime value5, Integer value6, UUID value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicksRecord
     */
    public TicksRecord() {
        super(Ticks.TICKS);
    }

    /**
     * Create a detached, initialised TicksRecord
     */
    public TicksRecord(UUID id, BigDecimal ask, BigDecimal bid, Long volume, LocalDateTime time, Integer version, UUID equityId) {
        super(Ticks.TICKS);

        set(0, id);
        set(1, ask);
        set(2, bid);
        set(3, volume);
        set(4, time);
        set(5, version);
        set(6, equityId);
    }
}
